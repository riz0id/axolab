

module Topos.Instances.Temporal.CPC where

open import Categorical.Category
open import Categorical.Category.Instances.CCCC
open import Categorical.Category.Instances.Functors
open import Categorical.Category.Instances.Product
  renaming ( _√óCat_ to _√ó_ )
open import Categorical.Category.Instances.Thin
open import Categorical.Functor
open import Prelude
open import Prelude.Equality
open import Prelude.Data.Product
  using ( _,_ )
open import Prelude.Data.Sigma
  using ( _,_ )
open import Relation.Decidable
open import Relation.Structure.Poset

open import Topos.Instances.Temporal.TemporalIndex
open import Topos.Instances.Temporal.Time

open Category
open Functor

-- ---------------------------------------------------------------------------------------------------------------------

record CPC {o ‚Ñì} (Time : Set o) (M : Category o ‚Ñì) : Set (lsuc (o ‚äî ‚Ñì)) where
  field
    MCCCC : CCCC M
    poset : DecidablePoset Time ‚Ñì

  module M     = Category M
  module poset = DecidablePoset poset

  Ix : Category (o ‚äî ‚Ñì) (o ‚äî ‚Ñì)
  Ix = TemporalIndex poset

  W‚àû : Category o ‚Ñì
  W‚àû = Thin (Time‚àûPoset poset)

  Proc : Category (o ‚äî ‚Ñì) (o ‚äî ‚Ñì)
  Proc = Functors Ix M

  field
    Cocone

  private
    open DecidablePoset poset
      using    ( compare‚â§ )

    open DecidablePoset (Time‚àûDecidablePoset poset)
      using    ( )
      renaming ( compare‚â§ to compare‚â§‚àû )

    open CCCC MCCCC

    ‚àê‚ü®_,_] : Time ‚Üí Time ‚Üí (Time ‚Üí M.Ob) ‚Üí M.Ob
    ‚àê‚ü® t , t* ] f
      with compare‚â§ t t*
    ... | yes t‚â§t* = f t +‚ÇÄ {!!} -- no way to recur on the successor of t...
    ... | no  t*‚â§t = {!!} -- needs total order, should be < although it might not make a difference

    S‚ÇÄ : Functor Ix M ‚Üí Functor Ix M ‚Üí Time ‚Üí Time ‚Üí Time ‚Üí M.Ob
    S‚ÇÄ A B t* t t‚Çí = {!!}

    ‚ñ∑‚ÇÄ'' : Ob (W‚àû √ó Proc √ó Proc) ‚Üí Ob Proc
    F‚ÇÄ   (‚ñ∑‚ÇÄ'' (tb , A , B)) ((t , t‚Çí) , t‚â§t‚Çí)
      with compare‚â§‚àû tb (time t)
    ... | yes tb‚â§t  = {!!}
    ... | no  t‚â§tb
      with compare‚â§‚àû tb (time t‚Çí)
    ... | yes tb‚â§t‚Çí = {!!}
    ... | no  t‚Çí‚â§tb = {!!} +‚ÇÄ {!!}
    F‚ÇÅ   (‚ñ∑‚ÇÄ'' ùëñ) = {!!}
    F-id (‚ñ∑‚ÇÄ'' ùëñ) = {!!}
    F-‚àò  (‚ñ∑‚ÇÄ'' ùëñ) = {!!}

  ‚ñ∑'' : Functor (W‚àû √ó Proc √ó Proc) Proc
  ‚ñ∑'' =
    record
      { F‚ÇÄ   = {!!}
      ; F‚ÇÅ   = {!!}
      ; F-id = {!!}
      ; F-‚àò  = {!!}
      }
    where
      ‚ñ∑''‚ÇÄ : Ob (W‚àû √ó Proc √ó Proc) ‚Üí Ob Proc
      ‚ñ∑''‚ÇÄ (tb , A , B)  =
        record
          { F‚ÇÄ   = Œª ùëñ ‚Üí {!!}
          ; F‚ÇÅ   = {!!}
          ; F-id = {!!}
          ; F-‚àò  = {!!}
          }


  -- open module Proc = Category Proc

  -- field
  --   cartesian  : Cartesian Proc
  --   closed     : CartesianClosed Proc cartesian
  --   coproducts : (A B : Ob) ‚Üí Coproduct Proc A B

  -- _+‚ÇÄ_ : Ob ‚Üí Ob ‚Üí Ob
  -- A +‚ÇÄ B = Coproduct.A+B (coproducts A B)

  -- _+‚ÇÅ_ : {A B X : Ob} ‚Üí Hom A X ‚Üí Hom B X ‚Üí Hom (A +‚ÇÄ B) X
  -- f +‚ÇÅ g = Coproduct.[_,_] (coproducts _ _) f g

-- CPC : ‚àÄ {o ‚Ñì} {T : Set o} ‚Üí DecidablePoset T ‚Ñì ‚Üí CCCC o ‚Ñì ‚Üí Category (o ‚äî ‚Ñì) (o ‚äî ‚Ñì)
-- CPC T B = Functors (TemporalIndex T) (CCCC.U B)

-- module _ {o ‚Ñì} {T : Set o} (decPoset : DecidablePoset T ‚Ñì) where
--   open module decPoset = DecidablePoset decPoset

--   Ix : Category (o ‚äî ‚Ñì) (o ‚äî ‚Ñì)
--   Ix = TemporalIndex poset

--   W‚àû : Category o ‚Ñì
--   W‚àû = Thin (Time‚àûPoset decPoset)

--   record CCCC : Set (o ‚äî ‚Ñì) where
--     field
--       C
--     field
--       cartesian  : (ùëñ : Ob Ix) ‚Üí Cartesian (C ùëñ)
--       closed     : (ùëñ : Ob Ix) ‚Üí CartesianClosed (C ùëñ) (cartesian ùëñ)
--       coproducts : (ùëñ : Ob Ix) (A B : Ob (C ùëñ)) ‚Üí Coproduct (C ùëñ) A B

--   ‚ñ∑''
